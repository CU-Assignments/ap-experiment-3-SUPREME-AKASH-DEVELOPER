### Aim:  
To merge k sorted linked lists into one sorted linked list efficiently.  

### Objectives:  
- Efficiently merge multiple sorted lists into a single sorted list.  
- Minimize time complexity, aiming for O(n log k) using a min-heap (priority queue) or divide & conquer approach.  
- Ensure stable merging, preserving the original relative order of equal elements.  
- Handle edge cases, such as empty lists or lists with duplicate values.  

### Code:
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        //AKASH_22BET10018
        int n=lists.size();
        priority_queue<int,vector<int>,greater<int>>q;
        for(int i=0;i<n;i++){
            ListNode* temp=lists[i];
            while(temp!=NULL){
                q.push(temp->val);
                temp=temp->next;
            }
        }
        if(!q.empty()){
        ListNode* ans=new ListNode(q.top());
        q.pop();
        ListNode* tempp=ans;
        while(!q.empty()){
            int temp=q.top();
            q.pop();
            tempp->next=new ListNode(temp);
           if(tempp->next!=NULL) tempp=tempp->next;
            
        }
        return ans;
        }
        else return NULL;
        
    }
};
