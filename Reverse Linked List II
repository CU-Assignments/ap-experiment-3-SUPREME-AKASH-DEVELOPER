### Aim:
To reverse a section of a singly linked list between given positions left and right, while keeping the rest of the list unchanged.  

### Objectives:
- Identify the sublist between positions left and right.  
- Reverse only the specified sublist while maintaining connections to the rest of the list.  
- Ensure a single-pass solution for optimal efficiency.

### Code:
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        //AKASH_22BET10018
        if (!head || left == right) {
            return head;
        }

        ListNode* dummy = new ListNode(0);
        dummy->next = head;
        ListNode* prev = dummy;

        for (int i = 0; i < left - 1; i++) {
            prev = prev->next;
        }

        ListNode* cur = prev->next;

        for (int i = 0; i < right - left; i++) {
            ListNode* temp = cur->next;
            cur->next = temp->next;
            temp->next = prev->next;
            prev->next = temp;
        }

        return dummy->next;        
    }
};
